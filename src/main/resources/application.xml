<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="  
           http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx.xsd 
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 引入jdbc配置文件 -->  
    <context:property-placeholder  ignore-unresolvable="true"  location="classpath:dbconfig.properties" />
	<!--自动扫描含有@Service将其注入为bean -->
	<context:component-scan base-package="com.free.service">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 声明使用注解式事务 -->     
	<tx:annotation-driven  transaction-manager="transactionManager" />

    <!-- 配置阿里 druid 数据库连接池 -->  
  	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close" >    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${db.url}" />    
       <property name = "username" value = "${db.username}" />    
       <property name = "password" value = "${db.password}" />    
       <property name = "driverClassName" value = "${db.driverClassName}" />    
       <!-- 通过别名的方式配置扩展插件 -->
       <property name = "filters" value = "${db.filters}" />    
       <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${db.maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${db.initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${db.maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${db.minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${db.timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${db.minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${db.validationQuery}" />    
       <property name = "testWhileIdle" value = "${db.testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${db.testOnBorrow}" />    
       <property name = "testOnReturn" value = "${db.testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${db.maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${db.removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${db.removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${db.logAbandoned}" />  
    </bean>
    
    <!-- (session工厂) 配置Mybatis的文件 ，mapperLocations配置*Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:com/free/mapper/*.xml"/>  
        <property name="configLocation" value="classpath:public/mybatis-config.xml" />
    </bean>
    
	<!-- tk mapper3的接口 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.free.mapper" />
		<!-- 配置多个不能换行 -->
		<property name="properties">
			<value>
				mappers=com.free.common.dao.mapper.CommonMapper
			</value>
		</property>
	</bean>
	
    <!-- 配置事务管理 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"/>  
    </bean>  
      
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">    
        <tx:attributes>
        	<!-- REQUIRED:支持当前事务，如果当前没有事务，就新建一个事务，
        	SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行 -->
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>    
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>    
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
             
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />    
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />    
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />    
            <tx:method name="check*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />  
        </tx:attributes>    
    </tx:advice>    

    <aop:config>    
        <!--aop切面： 第一个"*"代表所有类, 第二个"*"代表所有方法, ".."代表任意参数 -->    
        <aop:pointcut id="pointcut" expression="execution(*public com.free.service.impl.*ServiceImpl.*(..)) //
        	execution(* com.free.common.BaseService.*(..))" />       
        <!-- 把事务控制在service层 -->    
        <aop:advisor pointcut-ref="pointcut" advice-ref="transactionAdvice" />
    </aop:config>

</beans>